security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        admin_user_provider:
            id: App\Security\Provider\AdminProvider
            # entity:
            #     class: App\Entity\Admin
            #     property: email

        app_user_provider:
            id: App\Security\Provider\UserProvider
            # entity:
            #     class: App\Entity\User
            #     property: email
        # used to reload user from session & other features (e.g. switch_user)
            # entity:
            #     class: App\Entity\User
            #     property: uuid
                
    firewalls:
        admin:
            pattern: ^/api/admin
            stateless: false 
            switch_user: true
            jwt: 
              authenticator: admin.user_authenticator
            provider: admin_user_provider
            context: core
            # logout:
            #     path: api_logout
            #     target: api_admin_login
            json_login:
                check_path: /api/admin/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            login_throttling:
                max_attempts: 5
        app:
            pattern: ^/api/app
            stateless: false
            jwt: 
              authenticator: app.user_authenticator
            switch_user: true
            provider: app_user_provider
            context: core
            # logout:
            #     path: api_logout
            #     target: api_login
            json_login:
                check_path: /api/app/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            login_throttling:
                max_attempts: 5
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # main:
        #     lazy: true
        #     context: core
        #     provider: app_user_provider
        #     custom_authenticators:
        #       - app.user_authenticator
              # - App\Security\GoogleAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - {path: "^/api/checkout/webhook", roles: PUBLIC_ACCESS}
        - {path: "^/*", ips: "%env(TRUSTED_IPS)%"}
        - {path: ^/api/admin/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY}
        - {path: ^/api/app/users, methods: POST, roles: PUBLIC_ACCESS}
        - {path: ^/api/app/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY}
        - {path: "^/api/admin", roles: ROLE_ADMIN}

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
